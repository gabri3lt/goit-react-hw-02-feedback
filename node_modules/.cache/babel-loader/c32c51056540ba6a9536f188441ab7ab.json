{"ast":null,"code":"var _jsxFileName = \"/home/codi/Dokumenty/GitHub/goit-react-hw-02-feedback/src/components/Feedback.jsx\";\nimport { Component } from 'react';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Notification from './Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet total = 0;\nlet positiveFeedback = 0;\n\nclass Feedback extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.handleChangeGood = () => {\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.handleChangeNeutral = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.handleChangeBad = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1\n      }));\n      this.countTotalFeedback();\n      this.countPositiveFeedbackPercentage();\n    };\n\n    this.countTotalFeedback = () => {\n      total = this.state.good + this.state.neutral + this.state.bad;\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      positiveFeedback = +(this.state.good / total * 100).toFixed(0);\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Please leave feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        handleChangeGood: this.handleChangeGood,\n        handleChangeNeutral: this.handleChangeNeutral,\n        handleChangeBad: this.handleChangeBad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n        good: this.state.good,\n        neutral: this.state.neutral,\n        bad: this.state.bad,\n        total: total,\n        positiveFeedback: positiveFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Notification, {\n        good: this.state.good,\n        neutral: this.state.neutral,\n        bad: this.state.bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Feedback;","map":{"version":3,"sources":["/home/codi/Dokumenty/GitHub/goit-react-hw-02-feedback/src/components/Feedback.jsx"],"names":["Component","Statistics","FeedbackOptions","Notification","total","positiveFeedback","Feedback","state","good","neutral","bad","handleChangeGood","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","handleChangeNeutral","handleChangeBad","toFixed","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Notification from './Notification';\nlet total = 0;\nlet positiveFeedback = 0;\n\nclass Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleChangeGood = () => {\n    this.setState(prevState => ({\n      good: prevState.good + 1,\n    }));\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  handleChangeNeutral = () => {\n    this.setState(prevState => ({\n      neutral: prevState.neutral + 1,\n    }));\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  handleChangeBad = () => {\n    this.setState(prevState => ({\n      bad: prevState.bad + 1,\n    }));\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countTotalFeedback = () => {\n    total = this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    positiveFeedback = +((this.state.good / total) * 100).toFixed(0);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <section>\n        <h2>Please leave feedback</h2>\n        <FeedbackOptions\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          handleChangeGood={this.handleChangeGood}\n          handleChangeNeutral={this.handleChangeNeutral}\n          handleChangeBad={this.handleChangeBad}\n        />\n\n        <h2>Statistics</h2>\n\n        <Statistics\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n          total={total}\n          positiveFeedback={positiveFeedback}\n        />\n        <Notification\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n        />\n      </section>\n    );\n  }\n}\n\nexport default Feedback;\n"]},"metadata":{},"sourceType":"module"}